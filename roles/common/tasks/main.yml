- name: Remove dvd-repository remains inside /etc/apt/sources.list
  ansible.builtin.lineinfile:
    path: /etc/apt/sources.list
    regexp: "^(deb cdrom:.+)"
    state: absent
- name: Install basic packages
  ansible.builtin.apt:
    name: "{{ item }}"
    state: present
    update_cache: true
  with_items:
    - tmux
    - htop
    - vim
- name: Install well-known SSH keys into users
  ansible.posix.authorized_key:
    user: "{{ item }}"
    state: present
    exclusive: true # just to prevent additional keys from appearing, without previous notice
    key: "{{ lookup('file', 'authorized_keys') }}"
  with_items:
    - root
    - user
- name: Install custom MOTD
  ansible.builtin.template:
    src: "templates/motd.j2"
    dest: "/etc/update-motd.d/90-custom"
    owner: root
    group: root
    mode: "0555"
- name: Empty the system-default MOTD
  ansible.builtin.copy:
    content: ""
    dest: "/etc/motd"
    owner: root
    group: root
    mode: "0444"
- name: Block password authentication for SSH # because we are using so unsecure passwords :P
  ansible.builtin.lineinfile:
    path: /etc/ssh/sshd_config
    state: present
    regexp: "^#?PasswordAuthentication.+"
    line: "PasswordAuthentication no"
- name: Copy over the background image
  ansible.builtin.copy:
    src: "files/background.jpg"
    dest: "/usr/share/backgrounds/background.jpg"
    owner: root
    group: root
    mode: "0444"
- name: Set the background image
  become: true # for this, we really need to become root (to switch back to the user)
  become_user: user
  ansible.builtin.command:
    cmd: "gsettings set org.gnome.desktop.background picture-uri file:///usr/share/backgrounds/background.jpg"
  changed_when: false # ignore this change, it's just a setting
- name: Install packages
  ansible.builtin.apt:
    name: "{{ item }}"
    state: present
    update_cache: true
  with_items:
    - git
    - python3
    - build-essential
    - curl
    - flatpak
    - timeshift # needed for snapshots
    - avahi-daemon # for better dynamic discovery
- name: Configure zeroconf ssh
  ansible.builtin.copy:
    src: ssh.xml
    dest: /etc/avahi/services/ssh.service
    mode: "0444"
  notify: Enable avahi-daemon service and reload it
- name: Add flathub repository
  ansible.builtin.command:
    cmd: flatpak remote-add --if-not-exists flathub https://dl.flathub.org/repo/flathub.flatpakrepo
  changed_when: false # subsequent changes, change nothing
- name: Remove problematic packages
  ansible.builtin.apt:
    name: "{{ item }}"
    state: absent
    update_cache: true
  with_items:
    - brltty
- name: Prepare default timeshift.json
  ansible.builtin.command:
    cmd: "timeshift --scripted --snapshot-device /dev/mapper/{{ inventory_hostname }}--vg-root --list"
    creates: /etc/timeshift/timeshift.json
  register: check_status
  failed_when: check_status.rc > 1 # 1 means no snapshots
    cmd: "timeshift --scripted --snapshot-device /dev/mapper/{{ inventory_hostname }}--vg-root --list"
    creates: /etc/timeshift/timeshift.json
  register: check_status
  failed_when: check_status.rc > 1 # 1 means no snapshots
- name: Install WiFi connection profile (with secondary address)
  community.general.nmcli:
    type: wifi
    conn_name: by-ansible
    # conn_reload: true # my Ansible is too old...
    ifname: wlp4s0
    ssid: "{{ lookup('env', 'WIFI_SSID') }}"
    wifi_sec:
      key-mgmt: wpa-psk
      psk: "{{ lookup('env', 'WIFI_PASSWORD') }}"
    ip4:
      - "{{ secondary_address }}/24"
    method4: auto
    autoconnect: true
    state: present
  when: secondary_address is defined
  notify: Restart network-manager
- name: Install WiFi connection profile
  community.general.nmcli:
    type: wifi
    conn_name: by-ansible
    # conn_reload: true # my Ansible is too old...
    ifname: wlp4s0
    ssid: "{{ lookup('env', 'WIFI_SSID') }}"
    wifi_sec:
      key-mgmt: wpa-psk
      psk: "{{ lookup('env', 'WIFI_PASSWORD') }}"
    method4: auto
    autoconnect: true
    state: present
  when: not (secondary_address is defined)
  notify: Restart network-manager
